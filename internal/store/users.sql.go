// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package store

import (
	"context"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO users (
  id, name, multiplier
) VALUES (?, ?, ? )
  ON CONFLICT (id) DO UPDATE
  SET name = excluded.name, multiplier = excluded.multiplier
`

type CreateUserParams struct {
	ID         int64
	Name       string
	Multiplier float64
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser, arg.ID, arg.Name, arg.Multiplier)
	return err
}

const delteUser = `-- name: DelteUser :exec
DELETE FROM users
  WHERE id = ?
`

func (q *Queries) DelteUser(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, delteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, name, multiplier
  FROM users
  WHERE id = ?
`

func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(&i.ID, &i.Name, &i.Multiplier)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, name, multiplier FROM users
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(&i.ID, &i.Name, &i.Multiplier); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
