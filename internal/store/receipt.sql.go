// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: receipt.sql

package store

import (
	"context"
	"database/sql"
)

const createReceiptItem = `-- name: CreateReceiptItem :exec
INSERT INTO receipt (
  item_qty, item_id, user_id
) VALUES ( ?, ?, ? )
  ON CONFLICT (item_id) DO UPDATE
  SET item_qty = excluded.item_qty, user_id = excluded.user_id
`

type CreateReceiptItemParams struct {
	ItemQty sql.NullInt64
	ItemID  sql.NullInt64
	UserID  sql.NullInt64
}

func (q *Queries) CreateReceiptItem(ctx context.Context, arg CreateReceiptItemParams) error {
	_, err := q.db.ExecContext(ctx, createReceiptItem, arg.ItemQty, arg.ItemID, arg.UserID)
	return err
}

const deletReceiptItem = `-- name: DeletReceiptItem :exec
DELETE FROM receipt
WHERE id = ?
`

func (q *Queries) DeletReceiptItem(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deletReceiptItem, id)
	return err
}

const listReceipt = `-- name: ListReceipt :many
SELECT id, item_qty, item_id, user_id FROM receipt
`

func (q *Queries) ListReceipt(ctx context.Context) ([]Receipt, error) {
	rows, err := q.db.QueryContext(ctx, listReceipt)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Receipt
	for rows.Next() {
		var i Receipt
		if err := rows.Scan(
			&i.ID,
			&i.ItemQty,
			&i.ItemID,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUserItems = `-- name: ListUserItems :many
SELECT item_id FROM receipt
WHERE user_id = ?
`

func (q *Queries) ListUserItems(ctx context.Context, userID sql.NullInt64) ([]sql.NullInt64, error) {
	rows, err := q.db.QueryContext(ctx, listUserItems, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []sql.NullInt64
	for rows.Next() {
		var item_id sql.NullInt64
		if err := rows.Scan(&item_id); err != nil {
			return nil, err
		}
		items = append(items, item_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
